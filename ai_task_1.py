# -*- coding: utf-8 -*-
"""Task-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ADvhRo24GnnK3fUnzzgl_WB3I7JLEt9j
"""

!pip install diffusers transformers scipy

import jax
import numpy as np
import jax.numpy as jnp
from flax.jax_utils import replicate
from flax.training.common_utils import shard
import requests
from io import BytesIO
from PIL import Image
from diffusers import FlaxStableDiffusionImg2ImgPipeline

def create_key(seed=0):
    return jax.random.PRNGKey(seed)
rng = create_key(0)
url = "https://drive.google.com/uc?export=view&id=1ed4ecNDHwgP7m7YOMKpv5LT9VVhuXMiX"
response = requests.get(url)
init_img = Image.open(BytesIO(response.content)).convert("RGB")
init_img = init_img.resize((512, 512))


prompt = "A peaceful and calming scene in a garden with flowers, featuring a single paper coffee cup on a table under the morning sunlight. The cup should have a distinct logo on it, identical to the one in the photo I provided. The logo should have including the exact colors, design, and details of the logo as in the original image."
color = "#7a9683"

prompts = f"{prompt} This color should be used: {color}."

pipeline , params = FlaxStableDiffusionImg2ImgPipeline.from_pretrained(
    "CompVis/stable-diffusion-v1-4" , revision="flax" ,
    dtype=jnp.bfloat16
)

num_samples = jax.device_count()
rng = jax.random.split(rng, jax.device_count())
prompt_ids, processed_image = pipeline.prepare_inputs(prompt=[prompts]*num_samples, image = [init_img]*num_samples)
p_params = replicate(params)
prompt_ids = shard(prompt_ids)
processed_image = shard(processed_image)

output = pipeline(
    prompt_ids=prompt_ids,
    image=processed_image,
    params=p_params,
    prng_seed=rng,
    strength=0.5,
    num_inference_steps=50,
    jit=True,
    height=512,
    width=512).images

output_images = pipeline.numpy_to_pil(np.asarray(output.reshape((num_samples,) + output.shape[-3:])))

from IPython.display import display

for img in output_images:
    display(img)

for i, img in enumerate(output_images):
    img.save(f"Task-1__Output-Image_{i}.png")